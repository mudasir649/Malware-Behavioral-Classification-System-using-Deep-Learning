from tkinter import *
from tkinter import filedialog as fd
import glob
from collections import defaultdict
import pandas as pd
import numpy as np
import json
import os
import joblib
import pickle
pd.set_option("display.max.columns", None)
pd.set_option("display.precision", 2)
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

def parse_json_report():
    filename = fd.askopenfilename(initialdir="/",
                                          title="Select a File",
                                          filetypes=(("Json File",
                                                      "*.json*"),
                                                     ("all files",
                                                      "*.*")))

    Data = pd.DataFrame()
    Features = ['ID', 'Name', 'SHA1', 'SHA256', 'SHA512', 'MD5', 'Duration',
                'Severity Score', 'Category', 'Package', 'Size', 'Label', 'Label 2', 'category',
                'Time', 'Tid', 'Api_1']

    Dataset = pd.DataFrame(columns=Features)
    i = 0
    with open(filename) as datafile:
      data = json.load(datafile)

    Dataset.loc[i] = [data["info"]["id"], data["target"]["file"]["name"], data["target"]["file"]["sha1"],
                      data["target"]["file"]["sha256"], data["target"]["file"]["sha512"],
                      data["target"]["file"]["md5"],
                      data["info"]["duration"],
                      data["info"]["score"], data["info"]["category"], data["info"]["package"],
                      data["target"]["file"]["size"],
                      "Malware",
                      "1",
                      data['behavior']['processes'][1]['calls'][0]['category'],
                      data['behavior']['processes'][1]['calls'][0]['time'],
                      data['behavior']['processes'][1]['calls'][0]['tid'],
                      data['behavior']['processes'][1]['calls'][1]['api'],
                      ]

    Dataset.to_csv('C:\\Users\\MudassirRiaz\\PycharmProjects\\Cuckoo Report Parser\\Parser2\\dataset.csv')
    i = i + 1

    print(data["info"]["id"])  # ID
    print(data["target"]["file"]["name"])  # Name
    print(data["target"]["file"]["sha1"])  # SHA1
    print(data["target"]["file"]["sha256"])  # SHA256
    print(data["target"]["file"]["sha512"])  # SHA512
    print(data["target"]["file"]["md5"])  # MD5
    print(data["info"]["duration"])  # Duration of Execution
    print(data["info"]["score"])  # Severity Score
    print(data["info"]["category"])  # Category
    print(data["info"]["package"])  # Package i.e. exe
    print(data["target"]["file"]["size"])  # Size Bytes
    print(data['behavior']['processes'][1]['calls'][0]['category'])
    print(data['behavior']['processes'][1]['calls'][0]['api'])
    print(data['behavior']['processes'][1]['calls'][0]['time'])
    print(data['behavior']['processes'][1]['calls'][0]['tid'])
    print(data['behavior']['processes'][1]['calls'][0]['tid'])
    print(data['behavior']['processes'][1]['calls'][1]['api'])

    # Change label contents
    label_file_explorer.configure(text="File Opened: " + filename)


def Classifier():
    data = pd.read_csv("Malware_dataset.csv")
    data.head(5)
    data.describe()

    from sklearn import preprocessing
    le = preprocessing.LabelEncoder()

    X = data.drop(['Hash', 'Malware'], axis=1).values
    Y = data['Malware'].values

    scaler = MinMaxScaler()
    x = scaler.fit_transform(X)

    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)

    X_train

    y_train

    classifier = Sequential()
    classifier.add(Dense(10, activation='relu', kernel_initializer='random_normal', input_dim=100))
    classifier.add(Dense(4, activation='relu', kernel_initializer='random_normal'))
    classifier.add(Dense(1, activation='sigmoid', kernel_initializer='random_normal'))

    classifier.compile(optimizer='adam', loss='binar_crossentropy', metrics=['accuracy'])

    classifier.fit(X_train, y_train, batch_size=30, epochs=100)

    y_pred = classifier.predict(X_test)
    y_pred = (y_pred > 0.5)

    y_pred

    import random
    data = []
    for i in range(1, 100):
        number = random.randint(0, 300)
        data.append(number)

    res = classifier.predict([data])





# Create the root window
window = Tk()

# Set window title
window.title('File Explorer')

# Set window size
window.geometry("500x500")

# Set window background color
window.config(background="white")

# Create a File Explorer label
label_file_explorer = Label(window,
                            text="File Explorer using Tkinter",
                            width=100, height=4,
                            fg="blue")

button_explore = Button(window,
                        text="Browse Files",
                        command=parse_json_report)

button_classify = Button(window,
                          text="Classify",
                          command=Classifier)

button_exit = Button(window,
                     text="Exit",
                     command=exit)


# Grid method is chosen for placing
# the widgets at respective positions
# in a table like structure by
# specifying rows and columns
label_file_explorer.grid(column=1, row=1)

button_explore.grid(column=1, row=2)

button_classify(column=1, row=3)

button_exit.grid(column=1, row=4)

# Let the window wait for any events
window.mainloop()
